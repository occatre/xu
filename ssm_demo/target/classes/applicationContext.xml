<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd">


	<!-- 代理开启注解 -->
	<aop:config proxy-target-class="true"></aop:config>

	<!-- Spring扫描器 -->
	<context:component-scan
		base-package="com.nov.service"></context:component-scan>
	<context:component-scan
		base-package="com.nov.dao"></context:component-scan>

	<!-- 加载配置wenjian -->
	<context:property-placeholder
		location="classpath:db.properties" />

	<!-- 数据源 -->
	<bean id="dataSource"
		class="com.mchange.v2.c3p0.ComboPooledDataSource">
		<property name="driverClass" value="${jdbc.driverClass}"></property>
		<property name="jdbcUrl" value="${jdbc.jdbcUrl}"></property>
		<property name="user" value="${jdbc.user}"></property>
		<property name="password" value="${jdbc.password}"></property>
	</bean>

	<!-- Mybatis扫描器，用来扫描dao接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.nov.dao"></property>
	</bean>

	<!-- Mybatis SqlSessionFactoryBean实例(用来调用mapper) -->
	<bean id="sqlSessionFactory"
		class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="configLocation"
			value="classpath:sqlMapConfig.xml"></property>
		<property name="dataSource" ref="dataSource"></property>
		<property name="mapperLocations"
			value="classpath*:mapper/*.xml"></property>
	</bean>

	<!-- 缓存管理器 -->
	<!-- <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager"> 
		<property name="cacheManagerConfigFile" value="classpath:shiroCache.xml"></property> 
		</bean> -->

	<!-- 密码凭证器 -->
	<bean id="hashedCredentialsMatcher"
		class="org.apache.shiro.authc.credential.HashedCredentialsMatcher">
		<property name="hashAlgorithmName" value="MD5"></property>
		<property name="hashIterations" value="2"></property>
	</bean>

	<!-- RememberMe -->
	<!-- <bean id="sessionIdCookie" class="org.apache.shiro.web.servlet.SimpleCookie"> 
		<constructor-arg value="sid"></constructor-arg> <property name="httpOnly" 
		value="true"></property> <property name="maxAge" value="-1"></property> </bean> 
		<bean id="rememberMeCookie" class="org.apache.shiro.web.servlet.SimpleCookie"> 
		<constructor-arg value="rememberMe"></constructor-arg> <property name="httpOnly" 
		value="true"></property> <property name="maxAge" value="2592000"></property>一个月 
		</bean> <bean id="rememberMeManager" class="org.apache.shiro.web.mgt.CookieRememberMeManager"> 
		<property name="cipherKey" value="#{Base64.decode('2AvVhdsgUs0FSA3SDFAdag==')}"></property> 
		<property name="cookie" ref="rememberMeCookie"></property> </bean> -->

	<!-- realm数据源 -->
	<bean id="userRealm" class="com.nov.shiro.realm.UserRealm">
		<property name="credentialsMatcher"
			ref="hashedCredentialsMatcher"></property>
	</bean>
	<bean id="phoneRealm" class="com.nov.shiro.realm.PhoneRealm">
		<property name="credentialsMatcher"
			ref="hashedCredentialsMatcher"></property>
	</bean>
	<bean id="mailRealm" class="com.nov.shiro.realm.MailRealm">
		<property name="credentialsMatcher"
			ref="hashedCredentialsMatcher"></property>
	</bean>

	<!-- shiro默认为多Realm验证 -->
	<!-- Realm身份验证策略 -->
	<!-- <bean id="successfulStrategy" class="org.apache.shiro.authc.pam.AtLeastOneSuccessfulStrategy"></bean> -->
	<!-- Realm身份验证器 -->
	<!-- <bean id="authenticator" class="org.apache.shiro.authc.pam.ModularRealmAuthenticator"> -->
	<!-- <property name= "authenticationStrategy" ref="successfulStrategy"></property> -->
	<!-- </bean> -->

	<!-- 重写多realm身份认证器 -->
	<bean id="authenticator"
		class="com.nov.shiro.custom.CustomModularRealmAuthenticator">
		<property name="realms">
			<list>
				<ref bean="userRealm" />
				<ref bean="phoneRealm" />
				<ref bean="mailRealm" />
			</list>
		</property>
	</bean>

	<!-- 重写realm权限认证器 -->
	<bean id="authorizer"
		class="org.apache.shiro.authz.ModularRealmAuthorizer">
		<!-- <property name="realms"> -->
		<!-- <list> -->
		<!-- <ref bean="userRealm"/> -->
		<!-- <ref bean="phoneRealm"/> -->
		<!-- <ref bean="mailRealm"/> -->
		<!-- </list> -->
		<!-- </property> -->
	</bean>

	<!-- 安全管理器 -->
	<bean id="securityManager"
		class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
		<!-- 加载自定义realm身份认证器，在自定义认证器中加载realm -->
		<!-- <property name="realms"> -->
		<!-- <list> -->
		<!-- <ref bean="userRealm" /> -->
		<!-- <ref bean="phoneRealm" /> -->
		<!-- <ref bean="mailRealm" /> -->
		<!-- </list> -->
		<!-- </property> -->
		<property name="authenticator" ref="authenticator"></property>
		<property name="authorizer" ref="authorizer"></property>
		<!-- <property name="rememberMeManager" ref="rememberMeManager"></property> -->
	</bean>

	<!-- 重写过滤器处理器，执行全部过滤器 -->
<!-- 	<bean id="customFilterChainManager" class="com.nov.shiro.custom.CustomFilterChainManager"></bean> -->
<!-- 	<bean id="customFilterChainResolver" class="com.nov.shiro.custom.CustomPathMatchingFilterChainResolver"> -->
<!-- 		<property name="customFilterChainManager" ref="customFilterChainManager"></property> -->
<!-- 	</bean> -->
	
	<!-- 开启shiro注解 -->
	<bean
		class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">
		<property name="securityManager" ref="securityManager"></property>
	</bean>
	<bean id="customPermissionFilter" class="com.nov.shiro.custom.CustomPermissionsAuthorizationFilter"></bean>
	<bean id="shiroFilter"
		class="com.nov.shiro.custom.CustomShiroFilterFactoryBean">
		<property name="securityManager" ref="securityManager"></property>
		<property name="loginUrl" value="/login"></property>
		<property name="unauthorizedUrl" value="/unauthorized"></property>
		<property name="filterChainDefinitions">
			<value>
				/login=anon
				/validate=anon
				/**=authc
			</value>
		</property>
		<!-- url拦截 -->
		<property name="filters">
			<map>
				<entry key="perms" value="customPermissionFilter"></entry>
			</map>
		</property>
	</bean>
	
	<!-- 将自定义过滤器处理器，通过反射注入 -->
<!-- 	<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean"> -->
<!-- 	    <property name="targetObject" ref="shiroFilter"/> -->
<!-- 	    <property name="targetMethod" value="setFilterChainResolver"/> -->
<!-- 	    <property name="arguments" ref="customFilterChainResolver"/> -->
<!-- 	</bean> -->

	<bean id="lifecycleBeanPostProcessor"
		class="org.apache.shiro.spring.LifecycleBeanPostProcessor" />

	<!-- 集成Quartz start -->
	<bean id="jobBean" class="com.nov.controller.QuartzController" />

	<bean id="quartz01"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="jobBean" />
		<property name="targetMethod" value="quartz01" />
	</bean>

	<bean id="quartz02"
		class="org.springframework.scheduling.quartz.MethodInvokingJobDetailFactoryBean">
		<property name="targetObject" ref="jobBean" />
		<property name="targetMethod" value="quartz02" />
	</bean>

	<bean id="Trigger01"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="quartz01" />
		<!-- cron表达式 -->
		<property name="cronExpression" value="0 40 10 * * ?" />
	</bean>
	<bean id="Trigger02"
		class="org.springframework.scheduling.quartz.CronTriggerFactoryBean">
		<property name="jobDetail" ref="quartz02" />
		<!-- cron表达式 -->
		<property name="cronExpression" value="0 40 10 * * ?" />
	</bean>

	<!-- 总管理类如果将lazy-init='false'那么容器启动就会执行调度程序 作业调度器 SchedulerFactoryBean 管理和配置触发器 -->
	<!-- <bean id="startQuertz" class="org.springframework.scheduling.quartz.SchedulerFactoryBean" 
		lazy-init="false"> <property name="triggers"> <list> 作业调度器,list下可加入其他的调度器 
		<ref bean="Trigger01" /> <ref bean="Trigger02" /> </list> </property> </bean> -->
	<!-- 集成Quartz end -->

</beans>

<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE log4j:configuration SYSTEM "log4j.dtd">
<log4j:configuration
	xmlns:log4j="http://jakarta.apache.org/log4j/">
	
	<!-- 
		1、log4j 1.x xml配置文件必须含有上方头文件
		2、appender需要在root中引用，全局默认级别，全局输出
		3、logger 用来指定特定的包、类等，在additivity="false"时，可能会输出多次
		 -->
	<!-- 输出到控制台中 -->
	<appender name="console"
		class="org.apache.log4j.ConsoleAppender">
		<layout class="org.apache.log4j.PatternLayout">
			<param name="ConversionPattern"
				value="%d{ABSOLUTE} [%t] [%-5p] [%c.(%L)%M] - %m%n" />
		</layout>
	</appender>

	<!-- 将日志信息输出到控制台 -->
	<appender name="ConsoleAppender"
		class="org.apache.log4j.ConsoleAppender">
		<!-- 设置日志输出的样式 -->
		<layout class="org.apache.log4j.PatternLayout">
			<!-- 设置日志输出的格式 -->
			<param name="ConversionPattern"
				value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n" />
		</layout>
		<!--过滤器设置输出的级别 -->
		<filter class="org.apache.log4j.varia.LevelRangeFilter">
			<!-- 设置日志输出的最小级别 -->
			<param name="levelMin" value="DEBUG" />
			<!-- 设置日志输出的最大级别 -->
			<param name="levelMax" value="DEBUG" />
			<!-- 设置日志输出的xxx，默认是false -->
			<param name="AcceptOnMatch" value="true" />
		</filter>
	</appender>

	<!-- 将日志信息输出到文件，可以配置多久产生一个新的日志信息文件 -->
	<appender name="DailyRollingFileAppender"
		class="org.apache.log4j.DailyRollingFileAppender">
		<!-- 设置日志信息输出文件全路径名 -->
		<param name="File" value="D:/log4j/DailyRollingFileAppender.log" />
		<!-- 设置日志每分钟回滚一次，即产生一个新的日志文件 -->
		<param name="DatePattern" value="'.'yyyy-MM-dd-HH-mm'.log'" />
		<!-- 设置日志输出的样式 -->
		<layout class="org.apache.log4j.PatternLayout">
			<!-- 设置日志输出的格式 -->
			<param name="ConversionPattern"
				value="[%d{yyyy-MM-dd HH:mm:ss:SSS}] [%-5p] [method:%l]%n%m%n%n" />
		</layout>
	</appender>

	<!-- 注意： 
		1：当additivity="false"时，root中的配置就失灵了，不遵循缺省的继承机制 
		2：logger中的name非常重要，它代表记录器的包的形式，有一定的包含关系，试验表明 
		 2-1：当定义的logger的name同名时，只有最后的那一个才能正确的打印日志
		 2-2：当对应的logger含有包含关系时，比如：name=test.log4j.test8和 name=test.log4j.test8.UseLog4j，则 2-1的情况是一样的 
		 2-3：logger的name表示所有的包含在此名的所有记录器都遵循同样的配置，name的值中的包含关系是指记录器的名称哟！注意啦！ 
		3：logger中定义的level和appender中的filter定义的level的区间取交集 
		4：如果appender中的filter定义的levelMin > levelMax ，则打印不出日志信息
		 -->
	<!--指定logger的设置，additivity指示是否遵循缺省的继承机制 -->
	<!-- <logger name="org.springframework" additivity="false">
		<level value="DEBUG" />
		<appender-ref ref="console" />
	</logger> -->
	<!-- <logger name="org.mybatis" additivity="false">
		<level value="DEBUG" />
		<appender-ref ref="console" />
	</logger>
	<logger name="org.nov" additivity="false">
		<level value="DEBUG" />
		<appender-ref ref="console" />
	</logger> -->
	<root> 
		<level value="DEBUG"></level> 
		<!-- <appender-ref ref="ConsoleAppender"/>  -->
		<appender-ref ref="console"/> 
		<!-- <appender-ref ref="DailyRollingFileAppender"/> -->
	</root>
</log4j:configuration>